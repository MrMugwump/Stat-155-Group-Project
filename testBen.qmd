---
title: "testBen"
format: html
---

```{r}
library(coro)
library(partitions)
library(readr)
library(ggplot2)
library(dplyr)
```

```{r}
salariesAndTotals2021 = read_csv("salariesAndTotals2021.csv")
```

```{r}
xAxisLabels = c("Points","Total Rebounds","Assists")
relevantCols=c("PTS","TRB","AST")
for (i in 1:length(relevantCols)){
  p=ggplot(data=salariesAndTotals2021,aes_string(x=relevantCols[i],y="salary")) +
    geom_point(alpha = 0.7) +
    geom_smooth(method = 'lm', se = FALSE) +
    theme_minimal()+
      xlab(xAxisLabels[i])+ylab("Salary")
  print(p)
}
```



```{r}
appendSubsets = function(parentSet,currSets,setSize){
  sets = cbind()
  for (i in 1:length(currSets[1,])){
    subset = currSets[,i]
    remainingSet = setdiff(parentSet,subset)
    #print(remainingSet)
    remainingSetCombos  = combn(remainingSet,setSize,simplify = TRUE)
    for (j in 1:length(remainingSetCombos[1,])){
      newSubset = remainingSetCombos[,j]
      sets = cbind(sets,append(subset,newSubset))
    }
  }
  return(sets)
}

getPartitions = function(originalSet, partition){ # Think about adding redundancy if 
  sets = combn(originalSet,partition[1],simplify=TRUE)
  #print(sets)
  if(length(partition)==1){
    return(cbind(sets))
  }
  for (i in 2:length(partition)){
    if(partition[i]==0){
      return(sets)
    }
    if(partition[i]==1){ # makes it not make duplicates for specifically the 1s left over.
      newSets = cbind()
      for (j in 1:length(sets[1,])){
        newSets = cbind(newSets,append(sets[,j],setdiff(originalSet,sets[,j])))
      }
      return(newSets)
    }
    sets = appendSubsets(originalSet,sets,partition[i])
    
    #print(sets)
  }
  return(sets)
}

turnIntoStrings = function(headerString,partition, setPartitions){
  strings = cbind()
  for (i in 1:length(setPartitions[1,])){
    currString = ""
    currPartition = setPartitions[,i]
    index = 1
    for (j in partition){
      if(j!=0){
        concatenatedSubset = paste(currPartition[index:(index+j-1)],collapse = "*")
        if (currString==""){
          currString = paste(c(headerString,concatenatedSubset),collapse="")
        }
        else{
          currString = paste(c(currString,concatenatedSubset),collapse="+")
        }
        index=index+j
      }
    }
    strings = cbind(strings,currString)
  }
  return(strings)
}
```

```{r}

currSet = c("PTS","TRB","AST","STL")
testSet = cbind(c("PTS"))
testSet[1,]
partitions=parts(length(currSet))
for (i in 1:length(partitions[1,])){
  prt = partitions[,i]
  print(prt)
  partitionedSets = getPartitions(currSet,prt)
  print(partitionedSets)
  example <- turnIntoStrings("Salary~",prt,partitionedSets)
  print("_____________")
}

```


```{r}
parts(10)
currSet = c("a","b","c","d")
setdiff(currSet,c("a","b"))


getPartitions = function(partition,yourSet){
  combos = combn(yourSet,partition[1],simplify = FALSE)
  if(partition[1]==length(yourSet)){
    return(combos)
  }
  for (subset in combos){
       remainingSet = setdiff(yourSet,subset) # Gets the remaining sets for each of those largest groups
       # need to get the set of all combinations for the next step in the partitions, and then append 
  }
  for (i in 2:length(partition)){
    
    # Gets all of the combinations for the largest group
    
    for (subset in combos){
       remainingSet = setdiff(yourSet,subset) # Gets the remaining sets for each of those largest groups
       # need to get the set of all combinations for the next step in the partitions, and then append 
    }
  }
}
```

```{r}
currSet = c("PTS","TRB","AST","STL", "BLK", "`eFG%`", "Pos", "Age")

all_combinations <- unlist( # Generates every subset of currSet
  lapply(1:length(currSet), function(m) {
    combn(currSet, m, simplify = FALSE)
  }),
  recursive = FALSE
)

# Create a dataframe to store the model formulas and their adjusted R squared values
modelEvals <- data.frame(
  formulaString = character(),  # store formula strings
  adj_r2 = numeric(),# store adjusted R-squared values
  stringsAsFactors = FALSE
)

for (combo in all_combinations){ # combo is a subset of currSet
  #print(combo)
  partitions=parts(length(combo)) # Gets all the partitions for the current subset
  
  for (i in 1:length(partitions[1,])){
    prt = partitions[,i]
    partitionedSets = getPartitions(combo,prt) 
    formulas = turnIntoStrings("salary~",prt,partitionedSets) 
    
    for (frmla in formulas){
      model = lm(as.formula(frmla),data = salariesAndTotals2021)
      adj_r2= summary(model)$adj.r.squared
      modelEvals = rbind(modelEvals, data.frame(formulaString = frmla, adj_r2 = adj_r2)) # Stores the formula and the R squared value
      #print(modelEvals)

    }
  }
}
```

```{r}
top5 = modelEvals %>% arrange(desc(adj_r2))

head(top5)

write.csv(modelEvals,"modelEvals.csv")
```

